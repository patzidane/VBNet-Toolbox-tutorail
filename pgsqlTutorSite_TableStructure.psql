--Transaction bigin commit
CREATE TABLE accounts (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    balance DEC(15,2) NOT NULL,
    PRIMARY KEY(id)
);

INSERT INTO accounts(name,balance)
VALUES('Bob',10000);

BEGIN TRANSACTION;

INSERT INTO accounts(name,balance)
VALUES('Alice',10000);

SELECT 
    id,
    name,
    balance
FROM 
    accounts;

COMMIT TRANSACTION;

------gleichzeitig run
BEGIN;

UPDATE accounts 
SET balance = balance - 1000
WHERE id = 1;

UPDATE accounts
SET balance = balance + 1000
WHERE id = 2; 

SELECT 
    id,
    name,
    balance
FROM accounts;

-------------------------
COMMIT;

SELECT 
    id,
    name,
    balance
FROM accounts;

INSERT INTO accounts(name, balance)
VALUES('Jack',0);   

BEGIN;
 
UPDATE accounts 
SET balance = balance - 1500
WHERE id = 1;

UPDATE accounts
SET balance = balance + 1500
WHERE id = 3; 

--commit;
ROLLBACK;

SELECT 
    id,
    name,
    balance
FROM accounts;

--CREATE TABLE
create table account(
    user_id serial primary key,
    username varchar (50) unique not null,
    password varchar (50) not null,
    email varchar (355) unique not null,
    created_on timestamp not null,
    last_login timestamp
);

create table role(
    role_id serial primary key,
    role_name varchar (255) unique not null
);

create table account_role(
    user_id integer not null,
    role_id integer not null,
    grant_date timestamp without time zone,
    primary key (user_id, role_id),
    constraint account_role_role_id_fkey foreign key (role_id)
    REFERENCES role (role_id) match simple
    on update no action on delete no action,
    constraint account_role_user_id_fkey foreign key (user_id)
    REFERENCES account (user_id) match SIMPLE
    on update no action on delete no action
);

--select into
select film_id, title, rental_rate
into table film_r
from film
where rating = 'R'
and rental_duration = 5
order by title;

select * from film_r;

select film_id, title, length
into temp table short_film
from film
where length < 60
order by title;

select * from short_film;

--create table as
CREATE TABLE new_table_name
AS query;
	
CREATE TEMP TABLE new_table_name 
AS query; 

CREATE UNLOGGED TABLE new_table_name
AS query;

CREATE TABLE IF NOT EXISTS new_table_name
AS query;

create table action_film as 
select
    film_id,
    title,
    release_year,
    length,
    rating
    from
    film
    inner join film_category using (film_id)
    where category_id = 1; 

select * from action_film;

CREATE TABLE IF NOT EXISTS film_rating (rating, film_count) 
AS 
SELECT
    rating,
    COUNT (film_id)
FROM
    film
GROUP BY
    rating;

select * from film_rating;

--serial
CREATE TABLE fruits(
   id SERIAL PRIMARY KEY,
   name VARCHAR NOT NULL
);

INSERT INTO fruits(name) VALUES('orange');

INSERT INTO fruits(id,name) VALUES(DEFAULT,'apple');

SELECT * 
FROM fruits;

SELECT currval(pg_get_serial_sequence('fruits', 'id'));

INSERT INTO fruits(name) VALUES('banana')
RETURNING id;

--identity COLUMN
--GENERATED ALWAYS
CREATE TABLE color (
    color_id INT GENERATED ALWAYS AS IDENTITY,
    color_name VARCHAR NOT NULL
);

INSERT INTO color (color_name)
VALUES
    ('Red');

SELECT
    *
FROM
    color;

INSERT INTO color (color_id, color_name) --error
VALUES
    (2, 'Green');

INSERT INTO color (color_id, color_name)
OVERRIDING SYSTEM VALUE 
VALUES
    (2, 'Green');

--GENERATED BY DEFAULT AS IDENTITY
DROP TABLE color;
 
CREATE TABLE color (
    color_id INT GENERATED BY DEFAULT AS IDENTITY,
    color_name VARCHAR NOT NULL
);

INSERT INTO color (color_name)
VALUES
    ('White');

INSERT INTO color (color_id, color_name)
VALUES
    (2, 'Yellow');

DROP TABLE color;
 
CREATE TABLE color (
    color_id INT GENERATED BY DEFAULT AS IDENTITY 
    (START WITH 10 INCREMENT BY 10),
    color_name VARCHAR NOT NULL
); 

INSERT INTO color (color_name)
VALUES
    ('Orange');

SELECT
    *
FROM
    color;

INSERT INTO color (color_name)
VALUES
    ('Purple');

--Adding an identity column to an existing table
DROP TABLE shape;

create table shape(
    shape_id int not null,
    shape_name varchar not null
);

alter table shape
alter column shape_id add generated always as identity;

select * from shape;

--Changing an identity column
ALTER TABLE shape
ALTER COLUMN shape_id SET GENERATED BY DEFAULT;

\d shape

--Removing the GENERATED AS IDENTITY constraint
ALTER TABLE table_name 
ALTER COLUMN column_name 
DROP IDENTITY [ IF EXISTS ] 

ALTER TABLE shape
ALTER COLUMN shape_id
DROP IDENTITY IF EXISTS;