--Trigger
CREATE TRIGGER trigger_name {BEFORE | AFTER | INSTEAD OF} {event [OR ...]}
   ON table_name
   [FOR [EACH] {ROW | STATEMENT}]
   EXECUTE PROCEDURE trigger_function

CREATE TABLE employees_v4(
   --id int4 serial primary key,
   id serial primary key,
   first_name varchar(40) NOT NULL,
   last_name varchar(40) NOT NULL
);

CREATE TABLE employee_audits (
   --id int4 serial primary key,
   id  serial primary key,
   employee_id int4 NOT NULL,
   last_name varchar(40) NOT NULL,
   changed_on timestamp(6) NOT NULL
);

CREATE OR REPLACE FUNCTION log_last_name_changes()
  RETURNS trigger AS
$BODY$
BEGIN
 IF NEW.last_name <> OLD.last_name THEN
 INSERT INTO employee_audits(employee_id,last_name,changed_on)
 VALUES(OLD.id,OLD.last_name,now());
 END IF;
 
 RETURN NEW;
END;
$BODY$

LANGUAGE plpgsql VOLATILE
COST 100;

CREATE TRIGGER last_name_changes
  BEFORE UPDATE
  ON employees_v4
  FOR EACH ROW
  EXECUTE PROCEDURE log_last_name_changes();

INSERT INTO employees_v4 (first_name, last_name)
VALUES ('John', 'Doe');
 
INSERT INTO employees_v4 (first_name, last_name)
VALUES ('Lily', 'Bush');

SELECT * FROM employees_v4;

UPDATE employees_v4
SET last_name = 'Brown'
WHERE ID = 2;

UPDATE employees_v4
SET last_name = 'Pu'
WHERE ID = 1;

SELECT * FROM employee_audits;

--modifying the trigger
ALTER TRIGGER trigger_name ON table_name
RENAME TO new_name;

ALTER TRIGGER last_name_changes ON employees_v4
RENAME TO log_last_name_changes;

ALTER TABLE table_name
DISABLE TRIGGER trigger_name | ALL

ALTER TABLE employees_v4
DISABLE TRIGGER log_last_name_changes;

ALTER TABLE employees_v4
DISABLE TRIGGER ALL;

DROP TRIGGER [IF EXISTS] trigger_name ON table_name;

DROP TRIGGER log_last_name_changes ON employees_v4;