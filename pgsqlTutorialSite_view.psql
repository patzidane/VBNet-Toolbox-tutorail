--view
CREATE VIEW view_name AS query;

select 
    customer_id, store_id, address, postal_code, phone, city, country
    from
    customer
    inner join address on customer.address_id = address.address_id
    inner join city on address.city_id = city.city_id
    inner join country on city.country_id = country.country_id;

 SELECT customer_id,
    first_name || ' ' || last_name AS name,
    address,
    postal_code,
    phone,
    city,
    country       
   FROM customer 
     INNER JOIN address USING (address_id)
     INNER JOIN city USING (city_id)
     INNER JOIN country USING (country_id);

SELECT cu.customer_id AS id,
    cu.first_name || ' ' || cu.last_name AS name,
    a.address,
    a.postal_code AS "zip code",
    a.phone,
    city.city,
    country.country,
    cu.activebool notes,
    cu.store_id AS sid
   FROM customer cu
     INNER JOIN address a USING (address_id)
     INNER JOIN city USING (city_id)
     INNER JOIN country USING (country_id);

SELECT cu.customer_id AS id,
    cu.first_name || ' ' || cu.last_name AS name,
    a.address,
    a.postal_code AS "zip code",
    a.phone,
    city.city,
    country.country,
        CASE
            WHEN cu.activebool THEN 'active'
            ELSE ''
        END AS notes,
    cu.store_id AS sid
   FROM customer cu
     INNER JOIN address a USING (address_id)
     INNER JOIN city USING (city_id)
     INNER JOIN country USING (country_id);

CREATE VIEW customer_master AS
  SELECT cu.customer_id AS id,
    cu.first_name || ' ' || cu.last_name AS name,
    a.address,
    a.postal_code AS "zip code",
    a.phone,
    city.city,
    country.country,
        CASE
            WHEN cu.activebool THEN 'active'
            ELSE ''
        END AS notes,
    cu.store_id AS sid
   FROM customer cu
     INNER JOIN address a USING (address_id)
     INNER JOIN city USING (city_id)
     INNER JOIN country USING (country_id);

select * from customer_master;

--CREATE OR REPLACE view
CREATE OR REPLACE view_name 
AS 
query

CREATE OR REPLACE VIEW customer_master AS
  SELECT cu.customer_id AS id,
    cu.first_name || ' ' || cu.last_name AS name,
    a.address,
    a.postal_code AS "zip code",
    a.phone,
    city.city,
    country.country,
        CASE
            WHEN cu.activebool THEN 'active'
            ELSE ''
        END AS notes,
    cu.store_id AS sid,
    cu.email
   FROM customer cu
     INNER JOIN address a USING (address_id)
     INNER JOIN city USING (city_id)
     INNER JOIN country USING (country_id);

ALTER VIEW customer_master RENAME TO customer_info;

select * from customer_info;

DROP VIEW [ IF EXISTS ] customer_info;

DROP VIEW IF EXISTS customer_info;

--updatable Views
CREATE VIEW usa_cities AS SELECT
 city,
 country_id
FROM
 city
WHERE
 country_id = 103;

SELECT * FROM usa_cities;

INSERT INTO usa_cities (city, country_id)
VALUES('San Jose', 103);

SELECT
 city,
 country_id
FROM
 city
WHERE
 country_id = 103
ORDER BY
 last_update DESC;

DELETE
FROM
 usa_cities
WHERE
 city = 'San Jose';

 SELECT * FROM usa_cities
 WHERE
 city = 'San Jose';

 --recursive view
CREATE TABLE employees_v3 (
 employee_id serial PRIMARY KEY,
 full_name VARCHAR NOT NULL,
 manager_id INT
);

INSERT INTO table(column1,column2,...)
SELECT column1,column2,...
FROM another_table
WHERE condition;

INSERT INTO employees_v3(full_name,manager_id)
SELECT (first_name || ' ' || last_name) full_name, manager_id
from employee;

select * from employees_v3 where employee_id = 2;
select * from employees_v3;
select * from employees_v3 e
inner join (
    select * from employees_v3 where employee_id = 2
) s
on s.employee_id = e.manager_id;

select 
 employee_id,
 manager_id,
 full_name 
from employees_v3 where employee_id = 2
UNION
select 
 e.employee_id,
 e.manager_id,
 e.full_name 
from employees_v3 e
inner join (
    select 
    employee_id,
    manager_id,
    full_name 
 from employees_v3 where employee_id = 2
) s
on s.employee_id = e.manager_id;

WITH RECURSIVE subordinates AS (
 SELECT
 employee_id,
 manager_id,
 full_name
 FROM
 employees_v3
 WHERE
 employee_id = 2
 UNION
 SELECT
 e.employee_id,
 e.manager_id,
 e.full_name
 FROM
 employees_v3 e
 INNER JOIN subordinates s ON s.employee_id = e.manager_id
) SELECT
 *
FROM
 subordinates;

 WITH RECURSIVE reporting_line AS (
 SELECT
 employee_id,
 full_name AS subordinates
 FROM employees_v3
 WHERE
 manager_id IS NULL
 UNION ALL
 SELECT
 e.employee_id,
 (rl.subordinates || ' > ' || e.full_name) AS subordinates
 FROM
 employees_v3 e
 INNER JOIN reporting_line rl ON e.manager_id = rl.employee_id
) SELECT
 employee_id,
 subordinates
FROM
 reporting_line
ORDER BY
 employee_id;

 SELECT
 employee_id,
 full_name AS subordinates,
 manager_id
 FROM employees_v3
 WHERE
 manager_id IS NULL;

SELECT
 e.employee_id,
 e.full_name AS subordinates,
 e.manager_id
 FROM
 employees_v3 e;

 CREATE RECURSIVE VIEW reporting_line (employee_id, subordinates) AS 
SELECT
 employee_id,
 full_name AS subordinates
FROM
 employees_v3
WHERE
 manager_id IS NULL
UNION ALL
 SELECT
 e.employee_id,
 (
 rl.subordinates || ' > ' || e.full_name
 ) AS subordinates
 FROM
 employees_v3 e
 INNER JOIN reporting_line rl ON e.manager_id = rl.employee_id;

 SELECT
 subordinates
FROM
 reporting_line
WHERE
 employee_id = 8;

 --materialized view
CREATE MATERIALIZED VIEW rental_by_category
AS
 SELECT c.name AS category,
    sum(p.amount) AS total_sales
   FROM (((((payment p
     JOIN rental r ON ((p.rental_id = r.rental_id)))
     JOIN inventory i ON ((r.inventory_id = i.inventory_id)))
     JOIN film f ON ((i.film_id = f.film_id)))
     JOIN film_category fc ON ((f.film_id = fc.film_id)))
     JOIN category c ON ((fc.category_id = c.category_id)))
  GROUP BY c.name
  ORDER BY sum(p.amount) DESC
WITH NO DATA;

SELECT
 *
FROM
 rental_by_category;

 REFRESH MATERIALIZED VIEW rental_by_category;

 CREATE UNIQUE INDEX rental_category ON rental_by_category (category);

 REFRESH MATERIALIZED VIEW CONCURRENTLY rental_by_category;

 --with check option VIEW
 CREATE VIEW usa_city AS SELECT
 city_id,
 city,
 country_id
FROM
 city
WHERE
 country_id = 103
ORDER BY
 city;

 INSERT INTO usa_city (city, country_id)
VALUES ('Birmingham', 102);
 
INSERT INTO usa_city (city, country_id)
VALUES ('Cambridge', 102);

CREATE
OR REPLACE VIEW usa_city AS SELECT
 city_id,
 city,
 country_id
FROM
 city
WHERE
 country_id = 103
ORDER BY
 city WITH CHECK OPTION;

select * from usa_city;

UPDATE usa_city
SET country_id = 102
WHERE
 city_id = 135;

CREATE VIEW city_a AS SELECT
 city_id,
 city,
 country_id
FROM
 city
WHERE
 city LIKE 'A%';

 select * from city_a;

CREATE
OR REPLACE VIEW city_a_usa AS SELECT
 city_id,
 city,
 country_id
FROM
 city_a
WHERE
 country_id = 103 
WITH CASCADED CHECK OPTION;

select * from city_a_usa;

INSERT INTO city_a_usa (city, country_id)
VALUES
 ('Houston', 103);

CREATE OR REPLACE VIEW city_a_usa AS SELECT
 city_id,
 city,
 country_id
FROM
 city_a
WHERE
 country_id = 103 
WITH LOCAL CHECK OPTION;

INSERT INTO city_a_usa (city, country_id)
VALUES
 ('Houston', 103);